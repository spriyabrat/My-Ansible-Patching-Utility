---
- name: Filter servers based on kernel version
  hosts: "{{ cli_hosts }}"
  gather_facts: true
  
  #vars:
          #kernel_version: "{{ kernel_version }}" #"5.4.0-1110-aws"
          #reference_kernel_version: "5.4.0-1110-aws"

  tasks:
    - name: remove files
      command: rm -rf /home/saswat.beurik/upgrade/server_list.txt
      delegate_to: localhost
      tags: download_report

    - name: Get kernel version
      shell: uname -r
      register: kernel_version_output
      tags: download_report

    - name: Run apt-cache policy to get candidate version
      command: "apt-cache policy linux-image-aws"
      register: apt_cache_output
      tags: download_report

    - name: Extract candidate version
      set_fact:
        candidate_version: "{{ apt_cache_output.stdout_lines[2].split(':')[1].strip() }}"
      tags: download_report

    - name: Set kernel upgrade status
      set_fact:
        kernel_upgrade_status: "{{ 'Desired' if kernel_version_output.stdout == candidate_version else 'Not_Desired' }}"
      tags: download_report

    - name: Debug current and input kernel versions
      debug:
        msg:
          - "Current Kernel Version: {{ kernel_version_output.stdout }}"
            #- "Input Kernel Version: {{ kernel_version }}"
      tags: download_report

    - name: Fetch Ubuntu Release Status
      shell: pro security-status
      register: ubuntu_security_status_output
      tags: download_report

    - name: Determine Ubuntu status based on the command output
      set_fact:
        ubuntu_release_status: "{{ 'Ubuntu Pro' if 'This machine is attached to an Ubuntu Pro subscription' in ubuntu_security_status_output.stdout else 'Ubuntu Standard' }}"
      tags: download_report

    - name: Get Unattended Upgrades status
      command: systemctl status unattended-upgrades.service
      register: unattended_upgrades_status
      ignore_errors: true
      tags: download_report

    - name: Set Unattended Upgrades status as a fact
      set_fact:
        unattended_upgrades_status: "{{ 'active' if unattended_upgrades_status.rc == 0 and 'Active: active (running)' in (unattended_upgrades_status.stdout | default('')) else 'inactive' }}"
      tags: download_report

    - name: Get check-interval from canonical-livepatch config
      shell: sudo canonical-livepatch config
      register: canonical_livepatch_config_output
      tags: download_report

      #- name: Extract check-interval value
      #set_fact:
      # check_interval: "{{ canonical_livepatch_config_output.stdout_lines | select('match', 'check-interval: (.+)') | map('regex_replace', 'check-interval: (.+)', '\\1') | first }}"
      #tags: download_report
    - name: Extract check-interval value
      set_fact:
        check_interval: "{{ canonical_livepatch_config_output.stdout_lines | select('match', 'check-interval: (.+)') | map('regex_replace', 'check-interval: (.+) # minutes', '\\1') | first | regex_replace(' ', '') }}"
      tags: download_report

    - name: Debug check-interval value
      debug:
        msg:
          - "Check Interval: {{ check_interval }}"
      tags: download_report

    - name: Filter servers with upgraded kernel
      local_action: shell echo "{{ inventory_hostname }} {{ ansible_distribution_version }} {{ ansible_kernel }} {{ ubuntu_release_status }} {{ kernel_upgrade_status }} {{ unattended_upgrades_status }} {{ candidate_version }} {{ check_interval }}" >> server_list.txt
      tags: download_report

    - name: Convert server_list.txt to server_list.csv and save with timestamp
      shell: |
        timestamp=$(date "+%Y-%m-%d_%H-%M-%S")
        sed 's/ \| /,/g' /home/saswat.beurik/upgrade/server_list.txt > "/home/saswat.beurik/upgrade/server_list_$timestamp.csv"
        rm -f /home/saswat.beurik/upgrade/server_list.txt
      register: convert_result
      delegate_to: localhost
      tags: download_report

    - name: Display message indicating CSV download
      debug:
        msg: "CSV file has been generated and saved as server_list_{{ convert_result.end.split('.')[0] }}.csv"
      tags: download_report
