---
- name: Filter servers based on kernel version
  hosts: "{{ cli_hosts }}"
  gather_facts: true
  
  #vars:
          #kernel_version: "{{ kernel_version }}" #"5.4.0-1110-aws"
          #reference_kernel_version: "5.4.0-1110-aws"

  tasks:
          # - name: remove files
          #command: rm -rf /home/saswat.beurik/upgrade/server_list.txt
          #delegate_to: localhost
          #tags: view_hosts

    - name: Get kernel version
      shell: uname -r
      register: kernel_version_output
      tags: view_hosts

    - name: Run apt-cache policy to get candidate version
      command: "apt-cache policy linux-image-aws"
      register: apt_cache_output
      tags: view_hosts

    - name: Extract candidate version
      set_fact:
        candidate_version: "{{ apt_cache_output.stdout_lines[2].split(':')[1].strip() | regex_replace('(\\.\\d+)$', '') }}"
      tags: view_hosts

    - name: Extract modified Version
      set_fact:
              modified_candidate_version: "{{ candidate_version.split('.')[:-1] | join('.') }}-{{ candidate_version.split('.')[-1] }}-aws"
      tags: view_hosts

    - name: Set kernel upgrade status
      set_fact:
        kernel_upgrade_status: "{{ 'Desired' if kernel_version_output.stdout == modified_candidate_version else 'Not_Desired' }}"
      tags: view_hosts

    - name: Fetch Ubuntu Release Status
      shell: pro security-status
      register: ubuntu_security_status_output
      tags: view_hosts

    - name: Determine Ubuntu status based on the command output
      set_fact:
        ubuntu_release_status: "{{ 'Ubuntu Pro' if 'This machine is attached to an Ubuntu Pro subscription' in ubuntu_security_status_output.stdout else 'Ubuntu Standard' }}"
      tags: view_hosts

    - name: Get Unattended Upgrades status
      command: systemctl status unattended-upgrades.service
      register: unattended_upgrades_status
      ignore_errors: true
      tags: view_hosts

    - name: Set Unattended Upgrades status as a fact
      set_fact:
        unattended_upgrades_status: "{{ 'active' if unattended_upgrades_status.rc == 0 and 'Active: active (running)' in (unattended_upgrades_status.stdout | default('')) else 'inactive' }}"
      tags: view_hosts

    - name: Get check-interval from canonical-livepatch config
      shell: sudo canonical-livepatch config
      register: canonical_livepatch_config_output
      tags: view_hosts

    - name: Extract check-interval value
      set_fact:
        check_interval: "{{ canonical_livepatch_config_output.stdout_lines | select('match', 'check-interval: (.+)') | map('regex_replace', 'check-interval: (.+) # minutes', '\\1') | first | regex_replace(' ', '') }}"
      tags: view_hosts

    - name: Debug check-interval value
      debug:
        msg:
          - "Check Interval: {{ check_interval }}"
      tags: view_hosts
     
    - name: Filter servers with upgraded kernel
      local_action:
              module: lineinfile
              dest: "server_List_{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}_{{ ansible_date_time.minute }}.csv"
              line: "Hostname,Ubuntu Version,Current Kernel,Pro Status,Kernel Status,Uattn Status,Latest Version,Check Interval Time"
              create: yes
      tags: view_hosts

    - name: Filter servers with upgraded kernel
      local_action:
              module: lineinfile
              dest: "server_List_{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}_{{ ansible_date_time.minute }}.csv"
              line: "{{ inventory_hostname }},{{ ansible_distribution_version }},{{ ansible_kernel }},{{ ubuntu_release_status }},{{ kernel_upgrade_status }},{{ unattended_upgrades_status }},{{ modified_candidate_version }},{{ check_interval }}"
              create: yes
      register: csv_file_result
      tags: view_hosts
 
    - name: Display generated CSV file
      debug:
        msg: "Server Report Downloaded: {{ csv_file_result.diff[0].after_header.split()[0] }}"
      tags: view_hosts

- import_playbook: mail_integration.yml
